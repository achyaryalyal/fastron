==================
Install CloudPanel
==================
# You need an empty server with Ubuntu 22.04 or Debian 11 with root access
# Before running the installer, we need to update the system and install the required packages
apt update && apt -y upgrade && apt -y install curl wget sudo && apt -y autoremove && reboot

# Extend swap file
# check swap status
swapon --show
# disable and remove existing
dphys-swapfile swapoff && dphys-swapfile uninstall
# edit CONF_SWAPSIZE and CONF_MAXSWAP to desired size in MB, ex: 4096 for 4GB
nano /etc/dphys-swapfile
# create and enable it
dphys-swapfile setup && dphys-swapfile swapon && swapon --show

# Run the installer with your preferred Database Engine
curl -sS https://installer.cloudpanel.io/ce/v2/install.sh -o install.sh; \
echo "d67e37c0fb0f3dd7f642f2c21e621e1532cadefb428bb0e3af56467d9690b713  install.sh" | \
sha256sum -c && sudo DB_ENGINE=MARIADB_10.9 bash install.sh

# To hide CloudPanel <footer> tag, try edit script below:
nano /home/clp/htdocs/app/files/public/assets/css/style.css
	search for .footer and add => display: none;
nano /home/clp/htdocs/app/files/templates/Partial/footer.html.twig
	search:
		<footer class="footer fixed-bottom">
	replace to:
		<footer class="footer fixed-bottom" style="display:none;">

# You can now access CloudPanel via Browser: https://yourIpAddress:8443
# Ignore the self-signed certificate warning and click on Advanced and Proceed to continue to CloudPanel

# Change default timezone
# Go to Admin Area > Instance > Setting > Timezone > Asia/Jakarta > Save
# It's recommended to reboot the instance after changing the timezone

# Reboot server from CloudPanel
# Go to Admin Area > Instance > Reboot (at top right)

# Set CloudPanel custom domain
# Go to Admin Area > Settings > General > Domain Name > Save
# make sure DNS record has pointed to this server

# To update CloudPanel to the latest version, run the update script:
clp-update

# edit imagick policy for pdf file in order to convert PDF-to-image with Imagick, the version could be -6 or -7
nano /etc/ImageMagick-6/policy.xml
# change line
	<policy domain="coder" rights="none" pattern="PDF" />
# to be:
	<policy domain="coder" rights="read|write" pattern="PDF" />
# then restart web nginx and php

# Tune up CloudPanel MariaDB
nano /etc/mysql/mariadb.conf.d/100-cloudpanel.cnf
# add this line after [mysqld]
	sql_mode = "NO_ENGINE_SUBSTITUTION"
# set thread_cache_size from 32 to 128
# set table_open_cache from 2048 to 500000
# set innodb_buffer_pool_size from 512M to 2G
# set innodb_log_file_size from 1G to 256M
# set innodb_log_buffer_size from 10M to 512M
# set myisam_sort_buffer_size from 128M to 512M
# set open_files_limit from 65535 to 500000
# set table_open_cache from 2048 to 500000
systemctl restart mariadb
# make sure no strict mode in query result "SELECT @@SQL_MODE, @@GLOBAL.SQL_MODE;" to make your coding no more warning/error

# CloudPanel creates a dump of each backup database every midnight. To disable autobackup task, just comment out the line
nano /etc/cron.d/clp
#15 3 * * * clp /usr/bin/bash -c "/usr/bin/clpctl db:backup --ignoreDatabases='db1,db2' --retentionPeriod=7" &> /dev/null
#15 4 * * * clp /home/clp/scripts/create_backup.sh &> /dev/null

# Manual backup site
site_user="______" && site_domain="______" && date=$(date +%Y-%m-%d_%H-%M) && cd /home/${site_user}/htdocs/ && tar -cvzf ${site_domain}-${date}.tar.gz ${site_domain} && mv ${site_domain}-${date}.tar.gz /home/${site_user}/backups/ && cd /home/${site_user}/backups/ && chown ${site_user}:${site_user} ${site_domain}-${date}.tar.gz && ls -lah

# Manual backup (export) database
site_user="______" && site_db="______" && date=$(date +%Y-%m-%d_%H-%M) && cd /home/${site_user}/backups/databases/ && clpctl db:export --databaseName=${site_db} --file=${site_db}-${date}.sql.gz && chown ${site_user}:${site_user} ${site_db}-${date}.sql.gz && ls -lah

# Import database
clpctl db:import --databaseName=my-database --file=dump.sql.gz

# Database Show Master Credentials
clpctl db:show:master-credentials
# Access https://yourIpAddress/phpmyadmin/index.php and login with any credential
# Create user with no global privileges, but check all in database privileges except GRANT
# [Not Recommended] For allowing to create database, just comment out line $cfg['ShowCreateDb'] = false; at:
	nano /home/clp/htdocs/app/files/public/phpmyadmin/config.inc.php
# Manual import database:
	gunzip < file.sql.gz | mysql -u [DB_USER] -p [DB_NAME]
	mysql -u [DB_USER] -p [DB_NAME] < file.sql

# Another project in /var/www
# yes you can handle it but make sure the owner is clp:clp not www-data:www-data

# Keep nginx logs of last 30 days for project in /var/www
nano /etc/logrotate.d/nginx
/var/www/logs/nginx/*.log {
    su root root
    daily
    missingok
    rotate 7 
    dateext
    dateformat -%Y-%m-%d
    create 0640 clp clp
    postrotate
      /etc/init.d/nginx reload &> /dev/null || true
    endscript
}
logrotate /etc/logrotate.d/nginx

# TROUBLESHOOT: "W: GPG error: https://dl.yarnpkg.com/debian stable InRelease: The following signatures were invalid"
sudo apt-key adv --refresh-keys --keyserver keyserver.ubuntu.com
sudo apt update

===============
Edit SSH Config
===============
nano /etc/ssh/sshd_config
# set:
	Port 10022
	ClientAliveInterval 120
	ClientAliveCountMax 720
service ssh restart
# access CloudPanel menu Adnmin Area > Security
# change SSH port from 22 to 10022 in ipv4 and ipv6, type "SSH" at description

==================
Configure Fail2ban to Protect SSH No Proxied Cloudflare
==================
# CloudPanel on a fresh install has fail2ban but it’s inactive
# To see the status of Fail2ban run:
systemctl status fail2ban
# Make a new Fail2ban config file named jail.local, the jail.local one will override the main Fail2ban config called jail.conf
nano /etc/fail2ban/jail.local
	[DEFAULT]
	bantime = 10m
	findtime = 10m
	maxretry = 5
	[sshd]
	enabled = true
	logpath = %(sshd_log)s
	port = 10022
	banaction = iptables
	maxretry = 3
# After you make changes, restart Fail2ban:
systemctl restart fail2ban
# Now your server is analyzing logs and banning IP addresses. Check the status of the jail by running:
fail2ban-client status sshd

===============================
Install Monit at CloudPanel
===============================
sudo apt install -y monit && monit --version

nano /etc/monit/monitrc

# uncomment httpd like following lines
set httpd port 2812 and
  use address localhost
  allow localhost
  allow admin:monit

sudo monit -t
sudo monit reload

sudo systemctl enable monit
sudo /lib/systemd/systemd-sysv-install enable monit

sudo systemctl restart monit && sudo monit status && sudo monit summary

# for nginx (not apache):
sudo ln -s /etc/monit/conf-available/nginx /etc/monit/conf-enabled/

# for apache (not nginx):
sudo ln -s /etc/monit/conf-available/apache2 /etc/monit/conf-enabled/

# for mysql (not mariadb):
sudo ln -s /etc/monit/conf-available/mysql /etc/monit/conf-enabled/

# for mariadb (not mysql):
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/monit/mariadb > /etc/monit/conf-available/mariadb
sudo ln -s /etc/monit/conf-available/mariadb /etc/monit/conf-enabled/

sudo monit -t
sudo monit reload
sudo monit status && sudo monit summary

===============================
Install WordPress at CloudPanel
===============================
# Click on + Add Site and then click on Create a WordPress Site
# Enter the Domain Name, Site Title, Admin User Name, Admin Password, and Admin E-Mail and click on Create
# Done. The WordPress Site has been created
# In "Vhost", don't put rate limit because it's culprit for some services like /lib/ajax/service.php?sesskey=.... which makes dashboard dialog box error undefined 503
# In "Vhost", add this before location / {:
  # START HARDENING
  if ($request_method !~ ^(GET|POST)$ ) {
    return 444;
  }
  location = /robots.txt {
    allow all;
    log_not_found off;
    access_log off;
    try_files $uri /index.php?$args;
  }
  location ~* ^/(wp-content)/(.*?)\.(zip|gz|tar|bzip2|7z)\$ {
    deny all;
  }
  location ~* .(pl|cgi|py|sh|lua|asp)$ {
   return 444;
  }
  location ~* /(wp-config.php|readme.html|license.txt|nginx.conf) {
   deny all;
  }
  location = /wp-config.txt {
    deny all;
    access_log off;
    log_not_found off;
  }
  location /wp-content/uploads/ {
    location ~ \.php$ {
    #Prevent Direct Access Of PHP Files From Web Browsers
      deny all;
    }
    # webp rewrite rules
    location ~ \.(png|jpe?g)$ {
      add_header Vary "Accept-Encoding";
      add_header "Access-Control-Allow-Origin" "*";
      add_header Cache-Control "public, no-transform";
      access_log off;
      log_not_found off;
      expires max;
      try_files $uri  $uri =404;
    }
  }
  location /xmlrpc.php {
    deny all;
    access_log off;
    log_not_found off;
    return 444;
  }
  location ~ /.*/xmlrpc.php$ {
    deny all;
  }
  location ~* ^/wp-json/wp/v2/users {
    deny all;
    error_page 403 =404 / ;
  }
  location ~* ^/wp-content/plugins/.+\.(txt|log|md)$ {
    deny all;
    error_page 403 =404 / ;
  }
  location ^~ /wp-admin/install.php {
    deny all;
    error_page 403 =404 / ;
  }
  location ^~ /wp-admin/upgrade.php {
    deny all;
    error_page 403 =404 / ;
  }
  location ~* /(?:uploads|files)/.*\.php$ {
    deny all;
  }
  location ~ /\.(svn|git)/* {
    deny all;
    access_log off;
    log_not_found off;
  }
  location ~ /\.ht {
    deny all;
    access_log off;
    log_not_found off;
  }
  location ~ /\.user.ini {
    deny all;
    access_log off;
    log_not_found off;
  }
  location ~* ^/wp-content/uploads/.*.(html|htm|shtml|php|js|swf)$ {
    deny all;
  }
  location ~* ^/(?:wp-content|wp-includes)/.*\.php$ {
    deny all;
  }
  location ~* ^/wp-content/uploads/.*\.(?:s?html?|php|js|swf)$ {
    deny all;
  }
  # SPECIAL
  location ~/(nologin|nologin/) {return 403; error_page 403 /wp-nologin.php;} # WPS HIDE LOGIN /....
  location ~/(wp-login|wp-login/) {return 403; error_page 403 /wp-nologin.php;} # AKTIFKAN SETELAH DIARAHKAN KE /....
  location = /wp-login.php {return 403; error_page 403 /wp-nologin.php;} # AKTIFKAN SETELAH DIARAHKAN KE /....
  # END HARDENING
# In "PHP Settings"
	make sure version=PHP 8.2
	make sure max_input_vars=10000
	date.timezone=Asia/Jakarta;
	display_errors=off;
	disable_functions=pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,pcntl_unshare,gzinflate,phpinfo;
# wp-cron.php script executes a complex process, such as copying files or optimising images, this can cause the execution of the page to happen more slowly whilst this processes. To avoid this, WordPress can be configured to disable wp-cron.php from executing on page load and instead, have the server trigger this command periodically. We highly recommend running wp-cron via linux crontab rather than WordPress’s default way, irrespective of size or traffic of your site. So, you must disable wp-cron at the WordPress wp-config.php, just add this:
  define('DISABLE_WP_CRON', true);
# In "Cron Jobs", add cron job every hourly: /usr/bin/php8.2 /[YOUR_WORDPRESS_PATH]/wp-cron.php >/dev/null 2>&1

============================
Install Moodle at CloudPanel
============================
# Click on + Add Site and then click on Create a PHP Site
# Select the Application Moodle 4, enter Domain Name, Site User, Site User Password, and click on Create
# Creating a Moodle Project (v4.1.0 support PHP 8)
cd /opt && curl -sL https://github.com/moodle/moodle/archive/refs/tags/v4.1.0.tar.gz | tar xfz -
cp -R /opt/moodle-4.1.0/* /home/[USER_NAME]/htdocs/[SITE_DOMAIN]/
rm -rf /opt/moodle-*
# install unoconv for moodle document converter, you can enable the plugin and fill the path: /usr/bin/unoconv
sudo apt update && sudo apt install unoconv
# In "PHP Settings"
	make sure version=PHP 8.1; // because 8.2 still deprecated: Creation of dynamic property cache_config::$configlockmappings
	make sure max_execution_time=3m; // prevent fatal error during upgrade: Maximum execution time of 30 seconds exceeded
	make sure max_input_vars=100000;
	date.timezone=Asia/Jakarta;
	display_errors=off;
	disable_functions=pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,pcntl_unshare,gzinflate,phpinfo;
# In "Vhost", don't put rate limit because it's culprit for some services like /lib/ajax/service.php?sesskey=.... which makes dashboard dialog box error undefined 503
# In "Vhost", add this before {{settings}}:
  # START HARDENING
  add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";
  # END HARDENING
# In "Databases", create a database
# In "SSL/TLS", create and install Let's Encrypt Certificate
# In "Cron Jobs", add cron job every minute: /usr/bin/php8.1 /[YOUR_MOODLE_PATH]/admin/cli/cron.php
# In "Cron Jobs", add cron job every hourly: /usr/bin/php8.1 /[YOUR_MOODLE_PATH]/admin/cli/scheduled_task.php --execute="\core\task\file_trash_cleanup_task"
# In "Cron Jobs", add cron job every monthly: /usr/bin/php8.1 /[YOUR_MOODLE_PATH]/admin/cli/kill_all_sessions.php
	curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/moodle/script-moodle-list-old-files.php > /[YOUR_MOODLE_PATH]/admin/script-moodle-list-old-files.php
	curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/moodle/script-moodle-delete-old-files.sh > /[YOUR_MOODLE_PATH]/admin/script-moodle-delete-old-files.sh
	chmod +x /[YOUR_MOODLE_PATH]/admin/script-moodle-delete-old-files.sh
	chmod 0755 /[YOUR_MOODLE_PATH]/admin/script-moodle-delete-old-files.sh
# In "Cron Jobs", add cron job every week: sh /[YOUR_MOODLE_PATH]/admin/script-moodle-delete-old-files.sh
# Open your site in the browser, and go through the Moodle Installer. Choose MariaDB as database engine. Make sure Your server environment meets all minimum requirements
# Disable "Automated backup setup" in Administration -> Courses -> Backups -> Automated backup setup
# Disable "Recycle bin" in Administration -> Plugins -> Admin tools -> Recycle bin
# Make sure onluy Standard log is Enable in Administration -> Plugins -> Logging -> Manage log stores
# Make sure this file exist on wwwroot: favicon.ico, apple-touch-icon-120x120-precomposed.png, apple-touch-icon-120x120.png, apple-touch-icon-precomposed.png, apple-touch-icon.png
# You can check used moodledata directory size with this script and access https://[DOMAIN.COM]/admin/script-moodle-directory-size.php
	curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/moodle/script-moodle-directory-size.php > /[YOUR_MOODLE_PATH]/admin/script-moodle-directory-size.php
# nano /[YOUR_MOODLE_PATH]/course/edit_form.php
# $mform->addElement('text', 'shortname', get_string('shortnamecourse'), 'maxlength="100" size="20"');
# change to:
# $mform->addElement('text', 'shortname', 'Course code dari OPEN SIMKA', 'maxlength="100" minlength="16" size="20"');
# ADDITIONAL FOR MOUNTING "FILEDIR" WITH GOOGLE DRIVE
nano /home/bbg-spada/mount-spada-google-drive.sh
# paste it
	#!/bin/bash
	/usr/bin/rclone mount spada-storage-mounting: /home/bbg-spada/htdocs/spadadata/filedir --allow-non-empty --allow-other --dir-cache-time 72h --buffer-size 32M --drive-chunk-size 32M --vfs-cache-mode writes --vfs-read-chunk-size 128M --vfs-read-chunk-size-limit 1G &
# make it executable
chmod +x /home/bbg-spada/mount-spada-google-drive.sh
# add to cronjob
crontab -e
	# mount drive on boot
	@reboot sh /home/bbg-spada/mount-spada-google-drive.sh
# TROUBLESHOOT: Fix – broken page issue after Moodle 3.x installation on Nginx web server => https://dartinnovations.com/fix-broken-page-issue-after-moodle-3-x-installation-on-nginx-web-server/ 

============================
Install Slims at CloudPanel
============================
# Click on + Add Site and then click on Create a PHP Site
# Select the Application Slims 4, enter Domain Name, Site User, Site User Password, and click on Create
# Creating a Slims Project (v9.5.2 support PHP 8)
# make sure, you have installed YAZ [optional]
apt install php-dev php-pear yaz libyaz5 libyaz-dev libnet-z3950-zoom-perl
pecl channel-update pecl.php.net
pecl install yaz
# In "PHP Settings"
	make sure version=PHP 8.1; // because 8.2 still deprecated: Creation of dynamic property cache_config::$configlockmappings
	make sure max_input_vars=10000;
	date.timezone=Asia/Jakarta;
	display_errors=off;
	disable_functions=pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,pcntl_unshare,gzinflate,phpinfo;
# In "Vhost", don't put rate limit because it's culprit for some services like /lib/ajax/service.php?sesskey=.... which makes dashboard dialog box error undefined 503
# In "Vhost", add this before location / {:
	error_page 404 https://$host;
	try_files $uri $uri/ =404;
# In "Databases", create a database
# In "SSL/TLS", create and install Let's Encrypt Certificate
# to customize theme: Login Admin > Tema > Default > Customize
# to activate all default plugin: Login > Sistem > Plugin
# to add/edit content: Login > Sistem > Konten
# to activate visitor link, just leave empty in: Login Admin > Sistem > Pengaturan Sistem > IP Yang Diizinkan
# to show visitor link, edit file /template/default/parts/_navbar.php line 26, add this array:
  'visitor' => [
    'text' => __('Check-In Pengunjung'),
    'url' => 'index.php?p=visitor'
  ],
  'login' => [
    'text' => __('Login Sistem'),
    'url' => 'index.php?p=login'
  ],
# to edit quote in visitor page, edit file /template/default/visitor_template.php, edit some array value in "this.quotes" line 134
  this.quotes = {
    content: "Dengan ilmu, logika menjadi tajam. Dan dengan akhlak, hati menjadi lembut.",
    author: "UBBG Library"
  }
# replace
  <p class="lead">
# with
  <p class="lead" style="color:darkgray;">
# replace
  <label for="exampleInputPassword1"><?= __('Institution')?></label>
# with
  <label for="exampleInputPassword1">Nama Institusi <span style="color:orange">(hanya diisi bila Anda berasal dari luar kampus UBBG)</span></label>
# add comment to:
  <!--<small id="emailHelp" class="form-text text-muted"><?= __('Enough fill your member ID if you are member of ').$sysconf['library_name']; ?></small>-->
# to edit text button in visitor page, edit same file, change "Masuk" to "Check-In"
# add comment to:
  <!--<div class="text-right invisible">
    <small class="text-grey-dark"><?= __('Powered by ')?> <code>SLiMS</code></small>
  </div>-->

============================
Create a wildcard TLS/SSL certificate for your domain using acme.sh and Cloudflare DNS API for domain verification
============================
# Login Cloudflare
# Make sure on SSL overview, the minimum is "Full"
# Go to My Profile > API Tokens > Create Token > Edit Zone DNS > Use template
# Permissions = Edit; Zone Resources = Select your domain; click "Continue to summary"; click "Create token"
# Install acme.sh:
curl https://get.acme.sh | sh -s email=[YOUR_EMAIL_DOMAIN_HERE]
export CF_Token="[YOUR_CLOUDFLARE_DNS_API_KEY_HERE]"
bash /root/.acme.sh/acme.sh --issue --dns dns_cf --ocsp-must-staple --keylength 4096 -d [YOUR_DOMAIN_HERE] -d '*.[YOUR_DOMAIN_HERE]'
# Your Cloudflare DNS API key is stored in /root/.acme.sh/account.conf file and we can see it using the cat
cat /root/.acme.sh/account.conf
# Display the content of the CSR
DOMAIN="[YOUR_DOMAIN_HERE]" && CONFIG_ROOT="/root/.acme.sh/${DOMAIN}" && bash /root/.acme.sh/acme.sh --showcsr --csr "${CONFIG_ROOT}/$DOMAIN.csr"
# Set ACME client maintained by Let's Encrypt (not ZeroSSL by default since August-1st 2021)
bash /root/.acme.sh/acme.sh --server letsencrypt --set-default-ca
# Issue a cert (CRT file) from existing CSR
DOMAIN="[YOUR_DOMAIN_HERE]" && CONFIG_ROOT="/root/.acme.sh/${DOMAIN}" && bash /root/.acme.sh/acme.sh --signcsr --csr "${CONFIG_ROOT}/$DOMAIN.csr" --dns dns_cf
# Installing Let's Encrypt wildcard certificate
DOMAIN="[YOUR_DOMAIN_HERE]" && CONFIG_ROOT="/root/.acme.sh/${DOMAIN}" && bash /root/.acme.sh/acme.sh -d "$DOMAIN" --install-cert --reloadcmd "systemctl reload nginx" --fullchain-file "${CONFIG_ROOT}/fullchain.cer" --key-file "${CONFIG_ROOT}/$DOMAIN.key" --cert-file "${CONFIG_ROOT}/$DOMAIN.cer"
# It's automatically configure a cron jobs to renew our wildcard based certificate
crontab -l
	# automatic certificates renewal
	35 0 * * * "/root/.acme.sh"/acme.sh --cron --home "/root/.acme.sh" > /dev/null
# we can also do the manual TLS/SSL cert renewal: bash /root/.acme.sh/acme.sh --renew --force --dns dns_cf --ocsp-must-staple --keylength 4096 -d [YOUR_DOMAIN_HERE] -d '*.[YOUR_DOMAIN_HERE]'

============================
Plus Minus CloudPanel
============================
Intinya CloudPanel cocok untuk control panel turunan (bukan control panel induk) karena di CloudPanel tidak ada fitur manajemen DNS
- edit DNS record -> TIDAK BISA namun bisa menggunakan DNS dari Cloudflare
- tes kirim email dengan script php murni -> TIDAK BISA karena tidak ada mail server, sebab control panel ini memang fokusnya mengutamakan performa web server dan database server agar lebih ringan dan lincah tanpa dibebani oleh mail server
- htaccess -> TIDAK BISA, harus convert dulu ke nginx rule melalui situs https://winginx.com/en/htaccess kemudian simpan rule tersebut di bagian Vhost tepat di bawah {{settings}}
- ganti versi php -> BISA
- edit php.ini -> BISA
- tambah domain / subdomain -> BISA, tinggal pilih isinya berupa wordpress / any php site / any node.js site / just static html site / any python site
- sertifikat ssl -> BISA, tinggal create and install sertifikat letsencrypt di bagian "SSL/TLS"
- akses phpmyadmin -> BISA
- tambah module / ekstensi php -> SUDAH LENGKAP, gak ada yang perlu ditambah
- install wordpress -> BISA dan support multisite
- install moodle -> BISA
- install slims -> BISA
- install ojs -> tidak bisa karena ojs lebih ke apache/litespeed

============================
Tambahan: Install IDE Atheos https://github.com/Atheos/Atheos
============================
# open ide directory: cd [APP_PATH]/ide
# or create ide directory: cd [APP_PATH] && mkdir ide && cd ide
# BACKUP OLD: date=$(date +%Y-%m-%d_%H-%M) && mv atheos atheos_old_${date}
# check last version at https://github.com/Atheos/Atheos/tags and COPY the latest tar.gz link
wget [LINK_TAR_GZ]
ls
tar -xvzf [FILE_TAR_GZ]
ls
mv [FOLDER_EXTRACTED] atheos
ls
rm [FILE_TAR_GZ]
ls
nano +12 atheos/index.php
# add this to index.php line 12:
	if(!isset($_GET['key']) && !isset($_GET['token'])) {
		http_response_code(403);
		die('Forbidden');
	}
# add this to index.php before </head>:
	<style>
	.pdf-icon:before{font-family:'Font Awesome 5 Free';font-weight:900;font-size:16px;content:"\f1c1";}
	</style>
# search "current_file", replace this line in index.php: <span id="current_file"></span>
# with:
	<span id="current_file" style="user-select:all;"></span>
nano +54 atheos/common.php
# make sure the version same with [FILE_TAR_GZ] file name
	define("VERSION", "v5.5.0");
nano +59 atheos/common.php
# change value to 0, the value 0 means "until the browser is closed"
	ini_set("session.cookie_lifetime", 0);
nano +77 atheos/traits/checks.php
# comment out session_unset and session_destroy to prevent an unexpected logout
	//session_unset();
	//session_destroy();
	//Common::send("error", "Security violation.");
nano +119 atheos/components/user/init.js
# comment out atheos.user.logout to prevent an unexpected logout
	//atheos.user.logout();
nano +15 atheos/components/transfer/dialog.php
# add this line after $val = trim($val);
	if (!$val) {return 0;} // fix
# add this line after $last = strtolower($val[strlen($val)-1]);
	$val = preg_replace('~\D~', '', $val); // fix
# replace “ with " at line 60: <input type=“hidden” name=“MAX_FILE_SIZE” value=“<?php echo max_file_upload_in_bytes(); ?>”>
	<input type="hidden" name="MAX_FILE_SIZE" value="<?php echo max_file_upload_in_bytes(); ?>">
nano +293 atheos/components/editor/init.js
# replace this in init.js: path = (path.length < 30) ? path : '...' + path.substr(path.length - 30);
	path = (path.length < 60) ? path : '...' + path.substr(path.length - 60);
# set permissions on dirs & files, owner according to project, for /var/www the owner must clp:clp
chown -R clp:clp atheos && chmod -R 775 atheos
# Visit [IP_OR_DOMAIN]/app/ide/atheos/index.php with key & token params
# Setup it
# fill `Project` with PROJECT
# fill `Absolute Path` with folder path you want to manage, make sure that folder owner same with atheos folder owner, if you want to manage /var/www so run: "chown -R clp:clp /var/www" or change to www-data:www-data for non cloudpanel
# leave blank in `Custom Domain`
# `Development Mode` enabled
# `Anonymous Analytics` enabled
# `Timezone` GMT+07:00
# click "Install"
# Login to [IP_OR_DOMAIN]/app/ide/atheos/index.php with key & token params
# SETTING: Editor Settings
    ## Theme: Monokai
    ## Font Size: 14px
    ## Enable Code Ligatures: Enabled
    ## Highlight Active Line: Enabled
    ## Print Margin: Disabled
    ## Print Margin Column: 80
    ## Indent Guides: Enabled
    ## Show Fold Widgets: Enabled
    ## Line Wrap: Enabled
    ## Soft Tabs: Enabled
    ## Tab Size: 4
# SETTING: System Settings
    ## Active File Loop Behavior: Loop only active tabs
    ## Sidebar Hover Duration: 300ms (default)
    ## Show Hidden Files: True
    ## Filemanager Trigger: Single Click
    ## Left Sidebar Trigger: Hover
    ## Right Sidebar Trigger: Hover
    ## ProjectDock Trigger: Single Click

============================
Tambahan: Display current CPU usage as a percentage
============================
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/cpustat.sh > /etc/cpustat.sh
chmod +x /etc/cpustat.sh && chmod 0755 /etc/cpustat.sh
cp /etc/cpustat.sh /usr/bin/.
cpustat.sh

============================
Tambahan: Display current processes of the most RAM consuming
============================
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/ramstat.sh > /etc/ramstat.sh
chmod +x /etc/ramstat.sh && chmod 0755 /etc/ramstat.sh
cp /etc/ramstat.sh /usr/bin/.
ramstat.sh
