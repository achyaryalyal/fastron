##################################
# Set DNS Record
##################################
A-------@--------[YOUR_IP_SERVER]
A-------data-----[YOUR_IP_SERVER]
A-------dev------[YOUR_IP_SERVER]
A-------mail-----[YOUR_IP_SERVER]
CNAME---www------[YOUR_DOMAIN]
MX------@--------mail.[YOUR_DOMAIN]-----10
TXT-----@--------v=spf1 a mx -all
TXT-----_dmarc---v=DMARC1;p=none
### cloud kilat nameserver
NS-----ns1.kilatdomain.net
NS-----ns2.kilatdomain.net
NS-----ns3.kilatdomain.net
NS-----ns4.kilatdomain.net

##################################
# Be root
##################################
sudo -i

##################################
# Set hostname
##################################
hostnamectl set-hostname mail.[YOUR_DOMAIN] && hostname

##################################
# Update packages
##################################
sudo apt-get update && apt-get upgrade -y && apt-get autoremove -y --purge && apt-get autoclean -y
# configuring openssh-server? choose "Keep the local version currently installed"

##################################
# Useful packages
##################################
sudo apt-get install -y haveged curl git unzip zip fail2ban htop nload nmap nmon ntp gnupg gnupg2 wget pigz tree ccze mycli geoip-bin geoip-database

# configure timezone. Select: Asia->Jakarta
sudo systemctl enable ntp && dpkg-reconfigure tzdata && date

# increase history size
export HISTSIZE=10000

# nanorc - Improved Nano Syntax Highlighting Files
wget https://raw.githubusercontent.com/scopatz/nanorc/master/install.sh -qO- | sh

# open_files limits
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/security.limits.conf > /etc/security/limits.conf

# secure shared memory
> /etc/fstab && echo "none /run/shm tmpfs defaults,ro 0 0" >>/etc/fstab

# IP hardening
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/50-ip-sec.conf > /etc/sysctl.d/50-ip-sec.conf && sudo sysctl --system

##################################
# Add new user with root privilages
##################################
adduser [NEW_USER] && gpasswd -a [NEW_USER] sudo && gpasswd -a [NEW_USER] www-data
# TYPE root password and just ENTER when fill user profile
groupadd admin
usermod -a -G admin [NEW_USER]
dpkg-statoverride --update --add root admin 4750 /bin/su

##################################
# Generate ssh public key
##################################
mkdir -p /home/[NEW_USER]/.ssh && chmod 700 /home/[NEW_USER]/.ssh
cd /home/[NEW_USER]/.ssh && ssh-keygen -t rsa
# type: [NEW_USER]
# just empty the passphrase
mv [NEW_USER].pub authorized_keys && chmod 600 authorized_keys && rm /home/[NEW_USER]/.ssh/[NEW_USER]
sed -i "s/Port 22/Port 10022/" /etc/ssh/sshd_config
sed -i "s/LogLevel INFO/LogLevel VERBOSE/" /etc/ssh/sshd_config
sed -i "s/LoginGraceTime 120/LoginGraceTime 10/" /etc/ssh/sshd_config
sed -i "s/PermitRootLogin yes/PermitRootLogin no/" /etc/ssh/sshd_config
sed -i "s/X11Forwarding yes/X11Forwarding no/" /etc/ssh/sshd_config
service ssh restart && echo "Please login ssh with new user created" && exit

##################################
# Firewall with ufw
##################################
sudo apt-get install -y ufw

# define firewall rules
sudo ufw logging low
sudo ufw default allow outgoing
sudo ufw default deny incoming

# ssh
CURRENT_SSH_PORT=$(grep "Port" /etc/ssh/sshd_config | awk -F " " '{print $2}') && echo $CURRENT_SSH_PORT
sudo ufw allow ??

# smtp
sudo ufw allow 25
    #sudo ufw allow 465
    #sudo ufw allow 587

# pop3
sudo ufw allow 110
    #sudo ufw allow 995

# imap
sudo ufw allow 143
    #sudo ufw allow 993

# nginx
sudo ufw allow http
sudo ufw allow https

#ntp
sudo ufw allow 123

sudo ufw show added
sudo ufw enable
service ssh restart

##################################
# Install OpenDKIM
##################################
apt-get install sendmail opendkim opendkim-tools -y && nano /etc/opendkim.conf

# replace all with this:
AutoRestart Yes
UMask 002
Syslog yes
AutoRestartRate 10/1h
Canonicalization relaxed/simple
ExternalIgnoreList refile:/etc/opendkim/TrustedHosts
InternalHosts refile:/etc/opendkim/TrustedHosts
KeyTable refile:/etc/opendkim/KeyTable
SigningTable refile:/etc/opendkim/SigningTable
LogWhy Yes
Mode sv
PidFile /var/run/opendkim/opendkim.pid
SignatureAlgorithm rsa-sha256
Socket inet:8891@localhost
SyslogSuccess Yes
TemporaryDirectory /var/tmp
UserID opendkim:opendkim

mkdir -p /etc/opendkim/keys/[YOUR_DOMAIN] && cd /etc/opendkim/keys/[YOUR_DOMAIN] && opendkim-genkey -s mail -d [YOUR_DOMAIN] && chown opendkim:opendkim mail.* && chmod 600 mail.private && nano /etc/opendkim/TrustedHosts

# replace all with this:
127.0.0.1
localhost
192.168.0.1/24
*.[YOUR_DOMAIN]

nano /etc/opendkim/KeyTable

# replace all with this:
mail._domainkey.[YOUR_DOMAIN] [YOUR_DOMAIN]:mail:/etc/opendkim/keys/[YOUR_DOMAIN]/mail.private

nano /etc/opendkim/SigningTable

# replace all with this:
*@[YOUR_DOMAIN] mail._domainkey.[YOUR_DOMAIN]

nano /etc/mail/sendmail.mc

# add this line:
include(`/etc/mail/tls/starttls.m4')dnl
INPUT_MAIL_FILTER(`opendkim', `S=inet:8891@localhost')dnl

echo -e "127.0.0.1 [YOUR_DOMAIN]" >> /etc/hosts && echo -e "::1 [YOUR_DOMAIN]" >> /etc/hosts

sendmailconfig
# press "Y" for all

service opendkim restart && service sendmail restart && nano -$ mail.txt

### Copy everything and paste into the value field. Delete all double quotes and white spaces

### Add DNS TXT record with name "mail._domainkey" and paste to it's value
TXT-----mail._domainkey-----v=DKIM1; k=rsa; p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAraQm0eytpsm9CekqwVVQzl68TeHOcVchNL7o8usFFooa465XnZdmv0tRRoSuNrDjO4uJjFNCoY9NSpcjCHZJT3GLRA9u28cS7fNqG6Kbx4j5DhI0n5szAKlgLhTUSx9wbNfYYmaXWJGdl5uR13m2CvfU+dTJ3wytCuhLnjHSNS6cocws5Zypbo3A90v+6XJvoN2MjpoeyN1zJrr4W9KgsPH20mgX+QFNGNKCBsfbZ7P9lXGkZxMxT0ODtvYYWqdrVAL0y4/a/B4s+GV5LLZZped5wO9DrUQPwxc7TMe+oLKIEAi0r6GrJ9/vetBylssQ64FhE7jBjcmpSkW7+J+mqQIDAQAB

### Check DKIM status in Gmail inbox
echo "From: root@[YOUR_DOMAIN]
To: aymarxp@gmail.com
Subject: Test email
This is a test email."| sendmail -t

### If you click the show original button in Gmail, you should see "dkim=pass"

### Test to mail-tester.com
echo "From: root@[YOUR_DOMAIN]
To: ......<paste_here>......
Subject: Test email
This is a test email."| sendmail -t

Note: Mail Tester result may be 6.9/10. Don't worry, it's the highest score for you because your domain isn't listed in Pyzor Whitelist and Cloud Kilat hasn't rDNS

##################################
# Install Nginx
##################################
	sudo apt install nginx && nginx -v

	# adjusting the firewall
	sudo ufw app list
	sudo ufw allow 'Nginx Full'
	sudo ufw status

	# setting up server blocks
	###download nginx.conf from my github###
	chown www-data:www-data /var/log/nginx/error.log

	# create a symbolic link to activate server block
	sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/
	nginx -t
	service nginx reload

##################################
# Configure Fail2ban
##################################
cp /etc/fail2ban/fail2ban.conf /etc/fail2ban/fail2ban.local
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/fail2ban/jail.local > /etc/fail2ban/jail.local
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/fail2ban/nginx-botsearch.conf > /etc/fail2ban/filter.d/nginx-botsearch.conf
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/fail2ban/nginx-http-auth.conf > /etc/fail2ban/filter.d/nginx-http-auth.conf
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/fail2ban/nginx-limit-req.conf > /etc/fail2ban/filter.d/nginx-limit-req.conf
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/fail2ban/wordpress.conf > /etc/fail2ban/filter.d/wordpress.conf
service fail2ban restart && fail2ban-client status

# show status of all fail2ban jails at once
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/fail2ban/fail2ban-allstatus.sh > /etc/fail2ban/fail2ban-allstatus.sh
chmod 755 /etc/fail2ban/fail2ban-allstatus.sh
cp /etc/fail2ban/fail2ban-allstatus.sh /usr/bin/.
fail2ban-allstatus.sh

##################################
# Install MariaDB 10.3
##################################
wget -qO mariadb_repo_setup https://downloads.mariadb.com/MariaDB/mariadb_repo_setup && chmod +x mariadb_repo_setup && ./mariadb_repo_setup --mariadb-server-version=10.3 --skip-maxscale -y && rm mariadb_repo_setup && sudo apt-get update && sudo apt-get install -y mariadb-server
curl -sSL https://github.com/achyaryalyal/fastron/raw/master/mariadb/my.cnf > /etc/mysql/conf.d/my.cnf
mysql_secure_installation
  	# Change the root password? n
  	# Remove anonymous users? Y
  	# Disallow root login remotely? Y
  	# Remove test database and access to it? Y
  	# Reload privilege tables now? Y

# stop mysql service to apply new InnoDB log file size
sudo service mysql stop

# mv previous log file
sudo mv /var/lib/mysql/ib_logfile0 /var/lib/mysql/ib_logfile0.bak
sudo mv /var/lib/mysql/ib_logfile1 /var/lib/mysql/ib_logfile1.bak

# increase mariadb open_files_limit
curl -sSL https://github.com/achyaryalyal/fastron/raw/master/mariadb/limits.conf > /etc/systemd/system/mariadb.service.d/limits.conf

# reload daemon
systemctl daemon-reload

# restart mysql
service mysql start

# change default `root` username to `panglima`
mysql -u root -p
show databases; use mysql; update user set user='panglima' where user='root'; flush privileges; exit;

# check performance tuning
mkdir /opt/mysql-tuner && cd /opt/mysql-tuner && wget https://github.com/major/MySQLTuner-perl/tarball/master && tar xf master && cd major-MySQLTuner-perl-* && ./mysqltuner.pl

# optimize and repair databases
mysqlcheck -u panglima -p --auto-repair -o --optimize --all-databases

##################################
# Install php7.3-fpm
##################################
sudo apt-get install -y php7.3-fpm php7.3-common php7.3-opcache php7.3-readline php7.3-json php7.3-bcmath php7.3-bz2 php7.3-cli php7.3-curl php7.3-dev php7.3-gd php-imagick php7.3-intl php7.3-ldap php7.3-mbstring php7.3-mysql php7.3-soap php7.3-sqlite3 php7.3-sybase php-xdebug php7.3-xml php7.3-xmlrpc php7.3-xsl php7.3-zip
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/php7.3-fpm/php.ini > /etc/php/7.3/fpm/php.ini
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/php7.3-fpm/www.conf > /etc/php/7.3/fpm/pool.d/www.conf
chown www-data:www-data /var/log/php7.3-fpm.log
sudo service php7.3-fpm restart && php -v

# if you want to switch the default version to other php version
update-alternatives --config php

# check default php version you've picked
php -v

##################################
# Install PhpMyAdmin 4.9.0.1
##################################
mkdir -p /var/www/phpmyadmin && cd /var/www/phpmyadmin && wget https://files.phpmyadmin.net/phpMyAdmin/4.9.0.1/phpMyAdmin-4.9.0.1-english.zip && unzip phpMyAdmin-4.9.0.1-english.zip && mv phpMyAdmin-4.9.0.1-english*/* . && rm -rf phpMyAdmin-* && mv config.sample.inc.php config.inc.php && chown -R www-data:www-data /var/www/phpmyadmin

# custom config
sed -i "s/$cfg\['blowfish_secret'\] =.*/$cfg\['$2a$07$8pApKkdpXx75tfmfmpz9q.xLPtoS6CikUbkxBuT5mHbOWke1pDPCO'\] = 'spalDing46muLti99Balkans';\n\$cfg\['LoginCookieValidity'\] = '7200';/" /var/www/phpmyadmin/config.inc.php
sed -i "s/$i++;/$i++;\n\$cfg\['Servers'\]\[\$i\]\['hide_db'\] = 'mysql|information_schema|performance_schema|test|phpmyadmin';/" /var/www/phpmyadmin/config.inc.php
sed -i "$ a \$cfg['DefaultCharset'] = 'utf8';" /var/www/phpmyadmin/config.inc.php
sed -i "$ a \$cfg['DefaultConnectionCollation'] = 'utf8mb4_general_ci';" /var/www/phpmyadmin/config.inc.php

# modificate auth
nano /var/www/phpmyadmin/libraries/classes/Response.php

# paste key & token params checker di function login, after line : $header->disableWarnings();
if(!strpos($_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'],'key') !== FALSE && !strpos($_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'],'token') !== FALSE) {exit;}

# create server block: data-phpmyadmin
curl -sSL https://github.com/achyaryalyal/fastron/raw/master/nginx/data-phpmyadmin > /etc/nginx/sites-available/data-phpmyadmin && sudo ln -s /etc/nginx/sites-available/data-phpmyadmin /etc/nginx/sites-enabled/

# test before reload
nginx -t
service nginx reload

# Go to data.[DOMAIN]/index.php with key & token params

##################################
# Install Let's Encrypt
##################################
sudo apt-get install software-properties-common && sudo add-apt-repository ppa:certbot/certbot
sudo apt-get update && sudo apt-get install -y letsencrypt

# HTTPS: create Diffie-Hellman keys
openssl dhparam -dsaparam -out /etc/nginx/dhparam.pem 2048

# HTTPS: create ACME-challenge common directory
mkdir -p /var/www/_letsencrypt && chown -R www-data:www-data /var/www/_letsencrypt

# HTTPS: certbot (obtain certificates)
# disable before first run: ssl_certificate, ssl_certificate_key, ssl_trusted_certificate
certbot certonly --webroot -d [YOUR_DOMAIN] -d www.[YOUR_DOMAIN] -d dev.[YOUR_DOMAIN] -d data.[YOUR_DOMAIN] -d mail.[YOUR_DOMAIN] -d webmail.[YOUR_DOMAIN] --email aymarxp@gmail.com -w /var/www/_letsencrypt -n --agree-tos --force-renewal

# configure nginx
# to perform SSL

# testing SSL grade
# open https://www.ssllabs.com/ssltest

# Let’s Encrypt certs expire after 90 days
# since Ubuntu 17.10, Certbot will automatically run twice a day and renew any certificate that is within thirty days of expiration
# to test the renewal process is working correctly, you can use "dry-run" option:
certbot renew --dry-run

##################################
# Install Codiad 2.8.4
##################################
cd /var/www/master && rm -rf ide && wget https://github.com/Codiad/Codiad/archive/v.2.8.4.zip && unzip v.2.8.4.zip && mv Codiad-v.2.8.4 ide && rm -rf v.2.8.4.zip && chown -R www-data:www-data ide && chmod -R 775 ide && nano ide/index.php

# add this to index.php line 2:
	if(!isset($_GET['key']) && !isset($_GET['token'])) {exit;}

# edit index.php, find replace line 30: <title><?php i18n("CODIAD"); ?></title>
	<title>IDE</title>

# find replace label input username and label input password on line 128-132:
	<label style="display:none;"><span class="icon-user login-icon"></span> <?php i18n("Username"); ?></label>
	<input type="password" name="username" autofocus="autofocus" autocomplete="off" style="color:#2f2f2f;border-bottom:2px solid #343434;">
	<label style="display:none;"><span class="icon-lock login-icon"></span> <?php i18n("Password"); ?></label>
	<input type="password" name="password" style="color:#2f2f2f;border-bottom:2px solid #343434;">

# add display none to line 161: <button><?php i18n("Login"); ?></button>
	<button style="display:none;"><?php i18n("Login"); ?></button>

# add display none to line 163: <a class="show-language-selector"><?php i18n("More"); ?></a>
	<a class="show-language-selector" style="display:none;"><?php i18n("More"); ?></a>

# Go to [IP_OR_DOMAIN]/codiad/index.php with key & token params. Setup it and fill `Absolute Path` with folder path you want to manage

# Editor Settings
    ## Theme: Monokai
    ## Font Size: 14px
    ## Wrap Lines: Wrap Lines
    ## Soft Tabs: Yes

# System Settings
    ## Filemanager Trigger: Single Click

##################################
# Install Google Drive (64 bit)
##################################
cd /opt && wget https://docs.google.com/uc?id=0B3X9GlR6EmbnQ0FtZmJJUXEyRTA&export=download && mv uc\?id\=0B3X9GlR6EmbnQ0FtZmJJUXEyRTA gdrive && chmod +x gdrive

# insert verification code
./gdrive about
# if error occured, so remove token file: rm ~/.gdrive/*
# then, run again: ./gdrive about

# install
sudo install gdrive /usr/local/bin/gdrive && gdrive version

# view list
gdrive list

# download file
gdrive download fileId

# create directory
gdrive mkdir dirname

# upload file
gdrive upload --parent <Folder_ID> filename.tar.gz

# To see <Folder_ID>, just run: gdrive list

##################################
# Install Clamav
##################################
sudo apt-get install clamav clamav-daemon clamav-freshclam && clamdscan -V
sudo /etc/init.d/clamav-freshclam stop
sudo freshclam
sudo /etc/init.d/clamav-freshclam start

# enable notify and schedule the scan
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/clamscan_daily.sh > /clamscan_daily.sh
chmod +x /clamscan_daily.sh && chmod 0755 /clamscan_daily.sh

# add script to crontab
	# Let’s create a hard link as below:
	ln /clamscan_daily.sh /etc/cron.daily/clamscan_daily
	# Check to make sure that the hard link was created:
	# ls -li /etc/cron.daily/clamscan_daily

# if you get the following error: LibClamAV Error: cli_loaddb(): No supported database files found in /var/lib/clamav/
# just update the database manually:
freshclam -v

# if you get the following error: Clamd was NOT notified
# just restart the daemon
service clamav-daemon restart

##################################
# Install Monit
##################################
?
?

######### Flooding with SIEGE #########
apt-get install siege
siege -c 200 -b -t30s 'https://example.com'
######### Flooding with CURL #########
curl -s 'https://example.com/wp-login.php?[1-100]'
######### Flooding with DOSER ######### https://github.com/Quitten/doser.py
# command 999 threads sends GET requests:
python doser.py -t 999 -g 'https://example.com'
# command 999 threads sends POST requests with json data:
python doser.py -t 999 -p 'https://example.com' -ah 'Content-Type: application/json' -d '{"json": "payload"}'
