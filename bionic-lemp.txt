##################################
# Set DNS Record
# For app with www CNAME, like: www.[YOUR_DOMAIN]
##################################
A-------@--------[YOUR_IP_SERVER] ---> if you use control panel, change @ to * (plesk) or _ (cpanel)
A-------data-----[YOUR_IP_SERVER]
A-------dev------[YOUR_IP_SERVER]
A-------mail-----[YOUR_IP_SERVER]
CNAME---www------[YOUR_DOMAIN]
MX------@--------mail.[YOUR_DOMAIN]-----10
TXT-----@--------v=spf1 a mx -all
TXT-----_dmarc---v=DMARC1;p=none
# if you don't use control panel, set the nameserver
NS-----ns1.kilatdomain.net
NS-----ns2.kilatdomain.net
NS-----ns3.kilatdomain.net
NS-----ns4.kilatdomain.net

##################################
# Set DNS Record
# For app with non-www subdomain, like: siakad.[YOUR_DOMAIN]
##################################
A-------@------------------------------------[YOUR_IP_SERVER] ---> if you use control panel, change @ to * (plesk) or _ (cpanel)
A-------[YOUR_SUBDOMAIN_WITH_TLD]------------[YOUR_IP_SERVER]
A-------data---------------------------------[YOUR_IP_SERVER]
A-------dev----------------------------------[YOUR_IP_SERVER]
A-------mail.[YOUR_SUBDOMAIN_WITH_TLD]-------[YOUR_IP_SERVER]
MX------[YOUR_SUBDOMAIN_WITH_TLD]------------mail.[YOUR_SUBDOMAIN_WITH_TLD]-----10
TXT-----[YOUR_SUBDOMAIN_WITH_TLD]------------v=spf1 a mx -all
TXT-----_dmarc.[YOUR_SUBDOMAIN_WITH_TLD]-----v=DMARC1;p=none
# if you don't use control panel, set the nameserver
NS-----ns1.kilatdomain.net
NS-----ns2.kilatdomain.net
NS-----ns3.kilatdomain.net
NS-----ns4.kilatdomain.net

##################################
# Check IP Domain
##################################
dig [domain] +short
ping [domain]
whois [domain] | grep Server
dig @ns1.kilatdomain.net [domain] +short
dig @ns2.kilatdomain.net [domain] +short
dig @ns3.kilatdomain.net [domain] +short
dig @ns4.kilatdomain.net [domain] +short

##################################
# Be root
##################################
sudo -i

##################################
# Set hostname
##################################
hostnamectl set-hostname [YOUR_DOMAIN] && hostname
or
hostnamectl set-hostname [YOUR_SUBDOMAIN_WITH_TLD] && hostname

##################################
# Update packages
##################################
sudo apt update && apt upgrade -y && apt autoremove -y --purge && apt autoclean -y
# Restart services during package upgrades without asking? choose "Yes"
# configuring openssh-server? choose "Install the package maintainer's version"

##################################
# Useful packages
##################################
sudo add-apt-repository ppa:maxmind/ppa && sudo apt update && sudo apt install software-properties-common ghostscript neofetch curl wget git zip unzip rar unrar gnupg gnupg2 ca-certificates lsb-release apt-transport-https fail2ban haveged htop nload nmap nmon ntp pigz tree ccze mycli geoip-bin geoip-database geoip-database-extra geoipupdate libgeoip1 libmaxminddb0 libmaxminddb-dev mmdb-bin libpcre3 libpcre3-dev zlibc zlib1g zlib1g-dev

# GeoLite2 is geolocation free service. This data is less accurate than the paid service, GeoIP2.
# check GeoIP version
geoipupdate --version
# get GeoIP id and key at https://www.maxmind.com/en/my_license_key in menu Manage License Keys
# Old versions of our GeoIP Update program use a different license key format. Will this key be used for GeoIP Update? [Yes]
# Generate a license key and config file for use with geopipupdate version 3.1.1 or newer [Confirm]
# configure GeoIP with id and key
nano /etc/GeoIP.conf
	AccountID 999999
	LicenseKey 000000000000
	EditionIDs GeoLite2-Country GeoLite2-City
# update
geoipupdate -v

# install latest version of imagick (>= v7) to able converting process of WEBP format when user upload from any apps
cd /opt && git clone https://github.com/SoftCreatR/imei && cd imei && chmod +x imei.sh && ./imei.sh && identify -version

# configure timezone. Select: Asia->Jakarta
systemctl enable ntp && dpkg-reconfigure tzdata && date

# increase history size
export HISTSIZE=10000

# open_files limits
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/security.limits.conf > /etc/security/limits.conf
nano /proc/sys/fs/file-max
# add this line: fs.file-max=500000
# apply the setting: sudo sysctl -p

# IP hardening
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/50-ip-sec.conf > /etc/sysctl.d/50-ip-sec.conf && sudo sysctl --system

##################################
# Secure shared memory
##################################
nano /etc/fstab
# paste it:
none /run/shm tmpfs defaults,ro 0 0
# but if you want that memory space mounted in read/write mode, change that line with this:
none /run/shm tmpfs rw,noexec,nosuid,nodev 0 0

##################################
# Add swap space equals to RAM size
##################################
# check has swap enabled, if output is empty, it means that your system does not have swap space enabled
swapon --show
# creating a file which will be used for swap
fallocate -l 4G /swapfile && chmod 600 /swapfile && mkswap /swapfile && swapon /swapfile && swapon --show
# make the change permanent
nano /etc/fstab
# paste it
/swapfile swap swap defaults 0 0

##################################
# Change swap size
##################################
swapoff -a
rm /swapfile
fallocate -l 8G /swapfile && chmod 600 /swapfile && mkswap /swapfile && swapon /swapfile && swapon --show

##################################
# Display current CPU usage as a percentage
##################################
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/cpustat.sh > /etc/cpustat.sh
chmod +x /etc/cpustat.sh && chmod 0755 /etc/cpustat.sh
cp /etc/cpustat.sh /usr/bin/.
cpustat.sh

##################################
# Display current processes of the most RAM consuming
##################################
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/ramstat.sh > /etc/ramstat.sh
chmod +x /etc/ramstat.sh && chmod 0755 /etc/ramstat.sh
cp /etc/ramstat.sh /usr/bin/.
ramstat.sh

##################################
# Add new user with root privilages
##################################
adduser [NEW_USER] && gpasswd -a [NEW_USER] sudo && gpasswd -a [NEW_USER] www-data
# TYPE root password and just ENTER when fill user profile
groupadd admin
usermod -a -G admin [NEW_USER]
dpkg-statoverride --update --add root admin 4750 /bin/su

##################################
# Generate ssh public key
##################################
mkdir -p /home/[NEW_USER]/.ssh && chmod 700 /home/[NEW_USER]/.ssh
cd /home/[NEW_USER]/.ssh && ssh-keygen -t rsa
# type: [NEW_USER]
# just leave blank the passphrase
mv [NEW_USER].pub authorized_keys && chmod 600 authorized_keys && rm /home/[NEW_USER]/.ssh/[NEW_USER]
# edit ssh
nano /etc/ssh/sshd_config
# set:
	Port 10022
	LogLevel VERBOSE
	LoginGraceTime 10
	PermitRootLogin no
	X11Forwarding no
	ClientAliveInterval 120
	ClientAliveCountMax 720
service ssh restart && echo "Please login ssh with new user created" && exit && exit

##################################
# Firewall with ufw
##################################
sudo apt install -y ufw

# define firewall rules
ufw logging low
ufw default allow outgoing
ufw default deny incoming

# ssh
CURRENT_SSH_PORT=$(grep "Port " /etc/ssh/sshd_config | awk -F " " '{print $2}') && echo $CURRENT_SSH_PORT && ufw allow $CURRENT_SSH_PORT

# smtp
ufw allow 25
ufw allow 465
ufw allow 587

# pop3
    #ufw allow 110
    #ufw allow 995

# imap
    #ufw allow 143
    #ufw allow 993

# nginx
ufw allow http
ufw allow https

#ntp
ufw allow 123

ufw show added
ufw enable
service ssh restart

# if you want to delete a rule, just type: ufw delete [allow/deny] [PORT_NUMBER]

##################################
# Install OpenDKIM
##################################
sudo apt install sendmail opendkim opendkim-tools -y && nano /etc/opendkim.conf

# replace all with this:
AutoRestart Yes
UMask 002
Syslog yes
AutoRestartRate 10/1h
Canonicalization relaxed/simple
ExternalIgnoreList refile:/etc/opendkim/TrustedHosts
InternalHosts refile:/etc/opendkim/TrustedHosts
KeyTable refile:/etc/opendkim/KeyTable
SigningTable refile:/etc/opendkim/SigningTable
LogWhy Yes
Mode sv
PidFile /var/run/opendkim/opendkim.pid
SignatureAlgorithm rsa-sha256
Socket inet:8891@localhost
SyslogSuccess Yes
TemporaryDirectory /var/tmp
UserID opendkim:opendkim

mkdir -p /etc/opendkim/keys/[YOUR_DOMAIN] && cd /etc/opendkim/keys/[YOUR_DOMAIN] && opendkim-genkey -s mail -d [YOUR_DOMAIN] && chown opendkim:opendkim mail.* && chmod 600 mail.private && nano /etc/opendkim/TrustedHosts
or
mkdir -p /etc/opendkim/keys/[YOUR_SUBDOMAIN_WITH_TLD] && cd /etc/opendkim/keys/[YOUR_SUBDOMAIN_WITH_TLD] && opendkim-genkey -s mail -d [YOUR_DOMAIN] && chown opendkim:opendkim mail.* && chmod 600 mail.private && nano /etc/opendkim/TrustedHosts

# replace all with this:
	127.0.0.1
	localhost
	192.168.0.1/24
	*.[YOUR_DOMAIN]
or
	127.0.0.1
	localhost
	192.168.0.1/24
	*.[YOUR_SUBDOMAIN_WITH_TLD]

nano /etc/opendkim/KeyTable

# replace all with this:
mail._domainkey.[YOUR_DOMAIN] [YOUR_DOMAIN]:mail:/etc/opendkim/keys/[YOUR_DOMAIN]/mail.private
or
mail._domainkey.[YOUR_SUBDOMAIN_WITH_TLD] [YOUR_SUBDOMAIN_WITH_TLD]:mail:/etc/opendkim/keys/[YOUR_DOMAIN]/mail.private

nano /etc/opendkim/SigningTable

# replace all with this:
*@[YOUR_DOMAIN] mail._domainkey.[YOUR_DOMAIN]
or
*@[YOUR_SUBDOMAIN_WITH_TLD] mail._domainkey.[YOUR_SUBDOMAIN_WITH_TLD]

nano /etc/mail/sendmail.mc

# add this line:
include(`/etc/mail/tls/starttls.m4')dnl
INPUT_MAIL_FILTER(`opendkim', `S=inet:8891@localhost')dnl

nano /etc/hosts

# comment out any line with 127.0.1.1 and 127.0.0.1
# next, add this line:
	127.0.0.1 localhost [YOUR_DOMAIN]
	::1 [YOUR_DOMAIN]
or
	127.0.0.1 localhost [YOUR_SUBDOMAIN_WITH_TLD]
	::1 [YOUR_SUBDOMAIN_WITH_TLD]

sendmailconfig
# press "Y" for all

service opendkim restart && service sendmail restart && cat mail.txt

### Copy everything and paste into the value field. Delete all double quotes and white spaces

### Add DNS TXT record with name "mail._domainkey" and paste to it's value
TXT-----mail._domainkey-----v=DKIM1; h=sha256; k=rsa; p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApP/TaDH4rdcBnOdVpsDDN1eGc8HY5iZG2fpECplfHzq/BEoQHRfJ9QL4+X2RjuqzorWNp4AkeBNkZOId56DBt4H5XI5x7VLNdicSOQ5C0URLAv3AsB0eaDCyCBnGA4m91n9LxURlu9sR4l+rYNejCTEWbZFFVUhPW0y7rgs8jWTrwoiPDERohAwcDHIuOBc1Sq+FI8qW3zAQWOKeNpKrq/zBr5qBkWQUAfxw1p1nJJ50s8VdAACgKkXA0o5tP2OvKnVeHoQ6pUrXYvJeCYKqjeNYIljj7c3/2d8ftlSgj95L1tuB6ow1UjxeTOjTQcWaqBP9s9T2lsMcOBJG3fZB8QIDAQAB
or
### Add DNS TXT record with name "mail._domainkey.[YOUR_SUBDOMAIN_NO_DOMAIN_NO_TLD]" and paste to it's value
TXT-----mail._domainkey.[YOUR_SUBDOMAIN_NO_DOMAIN_NO_TLD]-----v=DKIM1; h=sha256; k=rsa; p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApP/TaDH4rdcBnOdVpsDDN1eGc8HY5iZG2fpECplfHzq/BEoQHRfJ9QL4+X2RjuqzorWNp4AkeBNkZOId56DBt4H5XI5x7VLNdicSOQ5C0URLAv3AsB0eaDCyCBnGA4m91n9LxURlu9sR4l+rYNejCTEWbZFFVUhPW0y7rgs8jWTrwoiPDERohAwcDHIuOBc1Sq+FI8qW3zAQWOKeNpKrq/zBr5qBkWQUAfxw1p1nJJ50s8VdAACgKkXA0o5tP2OvKnVeHoQ6pUrXYvJeCYKqjeNYIljj7c3/2d8ftlSgj95L1tuB6ow1UjxeTOjTQcWaqBP9s9T2lsMcOBJG3fZB8QIDAQAB

### NOTE: Name server changes usually take 24 to 48 hours to fully start working

### Check DKIM status in Gmail inbox, you can change [YOUR_DOMAIN] to [YOUR_SUBDOMAIN_WITH_TLD]
echo "From: root@[YOUR_DOMAIN]
To: [YOUR_EMAIL]
Subject: Test email
This is a test email."| sendmail -t

### If you click the show original button in Gmail, you should see "dkim=pass"

### Test to mail-tester.com, you can change [YOUR_DOMAIN] to [YOUR_SUBDOMAIN_WITH_TLD]
echo "From: root@[YOUR_DOMAIN]
To: ......<paste_here>......
Subject: Test email
This is a test email."| sendmail -t

Note: Mail Tester result may be 6.8/10. Don't worry, it's the highest score for you because your domain isn't listed in Pyzor Whitelist and Cloud Kilat hasn't rDNS

##################################
# Install Nginx
##################################
sudo add-apt-repository ppa:nginx/stable && sudo apt update && sudo apt install -y nginx && nginx -v

# Set up server blocks
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/nginx/stub_status.conf > /etc/nginx/conf.d/stub_status.conf
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/nginx/useragents.rules > /etc/nginx/useragents.rules
nano /etc/nginx/nginx.conf
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/nginx/general.conf > /etc/nginx/general.conf
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/nginx/nginx.conf > /etc/nginx/nginx.conf
# make sure this line appear in the http block of nginx.conf:
	include /etc/nginx/useragents.rules;
curl -sSL ........................ > /etc/nginx/sites-available/example.com
# make sure these lines appear in the server block :
	if ($badagent) { return 403; }
chown www-data:www-data /var/log/nginx/error.log

# Create a password file for Restricting Access with HTTP Basic Authentication
sudo apt install apache2-utils
htpasswd -c /etc/nginx/conf.d/.htpasswd [USER]

# Create a symbolic link to activate server block
sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/
nginx -t
nginx -s reload

# Add Nginx Header More as dynamic module
cd /opt && git clone https://github.com/openresty/headers-more-nginx-module && ls
nginx -v
wget http://nginx.org/download/nginx-[VERSION].tar.gz
tar zxvf nginx-[VERSION].tar.gz
cd nginx-[VERSION]
./configure --with-compat --add-dynamic-module=/opt/headers-more-nginx-module
make
make install
cp objs/*.so /etc/nginx/ && chmod 644 /etc/nginx/*.so && rm -rf /opt/ng*
nano /etc/nginx/nginx.conf
#add it before event {}: load_module /etc/nginx/ngx_http_headers_more_filter_module.so;
nginx -t
nginx -s reload

# Add Nginx GeoIP2 as dynamic module
cd /opt && git clone https://github.com/leev/ngx_http_geoip2_module && ls
nginx -v
wget http://nginx.org/download/nginx-[VERSION].tar.gz
tar zxvf nginx-[VERSION].tar.gz
cd nginx-[VERSION]
./configure --with-compat --add-dynamic-module=/opt/ngx_http_geoip2_module
make
make install
cp objs/*.so /etc/nginx/ && chmod 644 /etc/nginx/*.so && rm -rf /opt/ng*
nano /etc/nginx/nginx.conf
#add it before event {}: load_module /etc/nginx/ngx_http_geoip2_module.so;
nginx -t
nginx -s reload

# Add Nginx Brotli as dynamic module
# Brotli works only with HTTPS, so you need to install SSL certificate first, see "Install Let's Encrypt"
cd /opt && git clone https://github.com/google/ngx_brotli.git && cd ngx_brotli && git submodule update --init && cd .. && ls
nginx -v
wget http://nginx.org/download/nginx-[VERSION].tar.gz
tar zxvf nginx-[VERSION].tar.gz
cd nginx-[VERSION]
./configure --with-compat --add-dynamic-module=/opt/ngx_brotli
make
make install
cp objs/*.so /etc/nginx/ && chmod 644 /etc/nginx/*.so && rm -rf /opt/ng*
nano /etc/nginx/nginx.conf
#add it before event {}: load_module /etc/nginx/ngx_http_brotli_filter_module.so;
#add it before event {}: load_module /etc/nginx/ngx_http_brotli_static_module.so;
#comment gzip line
#add it before gzip line:
    brotli on;
    brotli_static on;
    brotli_types *;
nginx -t
nginx -s reload

[CAUTION] if error "bind() to 0.0.0.0:80 failed (98: Address already in use)" occurs, so just kill running nginx to restart it. Paste code below:
sudo pkill -f nginx
sudo systemctl start nginx

# Installing & Managing Nginx Amplify Agent
https://amplify.nginx.com/docs/guide-installing-and-managing-nginx-amplify-agent.html

##################################
# Add Cronjob
##################################
crontab -e
# see the cronjob at the bottom of this page

##################################
# Configure Fail2ban
##################################
cp /etc/fail2ban/fail2ban.conf /etc/fail2ban/fail2ban.local
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/fail2ban/jail.local > /etc/fail2ban/jail.local
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/fail2ban/nginx-botsearch.conf > /etc/fail2ban/filter.d/nginx-botsearch.conf
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/fail2ban/nginx-http-auth.conf > /etc/fail2ban/filter.d/nginx-http-auth.conf
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/fail2ban/nginx-limit-req.conf > /etc/fail2ban/filter.d/nginx-limit-req.conf
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/fail2ban/wordpress.conf > /etc/fail2ban/filter.d/wordpress.conf
chmod 664 /etc/fail2ban/filter.d/*.conf
service fail2ban restart && fail2ban-client status

# show status of all fail2ban jails at once
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/fail2ban/fail2ban-allstatus.sh > /etc/fail2ban/fail2ban-allstatus.sh
chmod +x /etc/fail2ban/fail2ban-allstatus.sh && chmod 0755 /etc/fail2ban/fail2ban-allstatus.sh
cp /etc/fail2ban/fail2ban-allstatus.sh /usr/bin/.
fail2ban-allstatus.sh

# if you can't edit unwritable jail.local file so you must force your root filesystem to remount as rw
mount -o remount,rw /etc/fail2ban/jail.local

##################################
# Install MariaDB 10.4.6
##################################
sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8 && sudo add-apt-repository 'deb [arch=amd64,arm64,ppc64el] http://mirror.biznetgio.com/mariadb/repo/10.4/ubuntu bionic main' && sudo apt update && sudo apt install mariadb-server
curl -sSL https://github.com/achyaryalyal/fastron/raw/master/mariadb/my.cnf > /etc/mysql/my.cnf
mysql_secure_installation
        # Switch to unix_socket authentication [Y/n]? n
  	# Change the root password? y
  	# Remove anonymous users? y
  	# Disallow root login remotely? y
  	# Remove test database and access to it? y
  	# Reload privilege tables now? y

# stop mysql service to apply new InnoDB log file size
service mysql stop

# mv previous log file
mv /var/lib/mysql/ib_logfile0 /var/lib/mysql/ib_logfile0.bak
mv /var/lib/mysql/ib_logfile1 /var/lib/mysql/ib_logfile1.bak

# increase mariadb open_files_limit
curl -sSL https://github.com/achyaryalyal/fastron/raw/master/mariadb/limits.conf > /etc/systemd/system/mariadb.service.d/limits.conf

# reload daemon
systemctl daemon-reload

# restart mysql
service mysql start

# check version
dpkg -l | grep mariadb

# optimize and repair databases
mysqlcheck -u root -p --auto-repair -o --optimize --all-databases

##################################
# Install php7.4-fpm
##################################
sudo add-apt-repository ppa:ondrej/php && sudo apt update
# Press [ENTER] to continue or Ctrl-c to cancel adding it? Press "ENTER"

sudo apt install -y php7.4-fpm libssl-dev dh-php dh-make php7.4-common php7.4-opcache php7.4-readline php7.4-json php7.4-bcmath php7.4-bz2 php7.4-cli php7.4-curl php7.4-dev php7.4-gd php7.4-intl php7.4-ldap php7.4-mbstring php7.4-mysql php7.4-soap php7.4-sqlite3 php7.4-sybase php7.4-xml php7.4-xmlrpc php7.4-xsl php7.4-zip php7.4-imagick php-imagick php7.4-xdebug php-xdebug
sudo apt autoremove
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/php7.4-fpm/php.ini > /etc/php/7.4/fpm/php.ini
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/php7.4-fpm/www.conf > /etc/php/7.4/fpm/pool.d/www.conf
chown www-data:www-data /var/log/php7.4-fpm.log
chmod 1733 -R /var/lib/php/sessions
# edit imagick policy for pdf file in order to convert PDF-to-image with Imagick
nano /etc/ImageMagick-6/policy.xml
# change line
<policy domain="coder" rights="none" pattern="PDF" />
# to be:
<policy domain="coder" rights="read|write" pattern="PDF" />
# restart web server and php
service nginx restart && service php7.4-fpm restart && php -v

# if have many version of php & you want to switch the default version to other php version. Then, check default version
update-alternatives --config php && php -v

##################################
# Install PhpMyAdmin 4.9.5
##################################
mkdir -p /var/www/phpmyadmin && cd /var/www/phpmyadmin && wget https://files.phpmyadmin.net/phpMyAdmin/4.9.5/phpMyAdmin-4.9.5-english.zip && unzip phpMyAdmin-4.9.5-english.zip && mv phpMyAdmin-4.9.5-english*/* . && rm -rf phpMyAdmin-* && mv config.sample.inc.php config.inc.php && chown -R www-data:www-data /var/www/phpmyadmin

# custom config
sed -i "s/$cfg\['blowfish_secret'\] =.*/$cfg\['blowfish_secret'\] = '$2a$07$8pApKkdpXx75tfmfmpz9q.xLPtoS6CikUbkxBuT5mHbOWke1pDPCO';\n\$cfg\['LoginCookieValidity'\] = '7200';/" /var/www/phpmyadmin/config.inc.php
sed -i "s/$i++;/$i++;\n\$cfg\['Servers'\]\[\$i\]\['hide_db'\] = 'mysql|information_schema|performance_schema|test|phpmyadmin';/" /var/www/phpmyadmin/config.inc.php
sed -i "$ a \$cfg['DefaultCharset'] = 'utf8';" /var/www/phpmyadmin/config.inc.php
sed -i "$ a \$cfg['DefaultConnectionCollation'] = 'utf8mb4_general_ci';" /var/www/phpmyadmin/config.inc.php
sed -i "$ a \$cfg['MaxNavigationItems'] = 1000;" /var/www/phpmyadmin/config.inc.php
sed -i "$ a \$cfg['NavigationTreeEnableGrouping'] = false;" /var/www/phpmyadmin/config.inc.php
sed -i "$ a \$cfg['NavigationDisplayLogo'] = false;" /var/www/phpmyadmin/config.inc.php
sed -i "$ a \$cfg['TitleTable'] = 'Data | @DATABASE@ / @TABLE@';" /var/www/phpmyadmin/config.inc.php
sed -i "$ a \$cfg['TitleDatabase'] = 'Data | @DATABASE@';" /var/www/phpmyadmin/config.inc.php
sed -i "$ a \$cfg['TitleServer'] = 'Data';" /var/www/phpmyadmin/config.inc.php
sed -i "$ a \$cfg['TitleDefault'] = 'Data';" /var/www/phpmyadmin/config.inc.php

# modificate auth
nano /var/www/phpmyadmin/libraries/classes/Response.php

# paste key & token params checker di function login, after line : $header->disableWarnings();
if(!strpos($_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'],'key') !== FALSE && !strpos($_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'],'token') !== FALSE) {exit;}

nano /var/www/phpmyadmin/libraries/classes/Plugins/Auth/AuthenticationCookie.php
search label with "input_username" and find <input>, change type "text" to "password"
and under input tag, add this style: <style>body{background:linear-gradient(to right,#170071,#754600) !important;}h1{display:none !important;}</style>

# create server block: data-phpmyadmin
curl -sSL https://github.com/achyaryalyal/fastron/raw/master/nginx/data-phpmyadmin > /etc/nginx/sites-available/data-phpmyadmin && sudo ln -s /etc/nginx/sites-available/data-phpmyadmin /etc/nginx/sites-enabled/

# test before reload
nginx -t
nginx -s reload

# Go to data.[DOMAIN]/index.php with key & token params

##################################
# Install Let's Encrypt
##################################
sudo apt install -y certbot

# HTTPS: create Diffie-Hellman keys
openssl dhparam -dsaparam -out /etc/nginx/dhparam.pem 4096

# obtain certificate for domain and CNAME (use --dry-run for testing)
certbot certonly --email [YOUR_EMAIL] --agree-tos --rsa-key-size 4096 --webroot -w /var/www/[YOUR_DIRECTORY] -d example.com -d www.example.com

# obtain certificate for a subdomain (use --dry-run for testing)
certbot certonly --email [YOUR_EMAIL] --agree-tos --rsa-key-size 4096 --webroot -w /var/www/[YOUR_DIRECTORY] -d [SUBDOMAIN].example.com
# example subdomain non-wordpress
certbot certonly --email [YOUR_EMAIL] --agree-tos --rsa-key-size 4096 --webroot -w /var/www/master -d [SUBDOMAIN].example.com
# example subdomain wordpress
certbot certonly --email [YOUR_EMAIL] --agree-tos --rsa-key-size 4096 --webroot -w /var/www/master/wordpress/stkipbbg-[SUBDOMAIN] -d [SUBDOMAIN].example.com

# certbot is auto run renewal, if you want to test it, just use renew subcommand (use --dry-run for testing)
certbot renew --dry-run
# if success, run without --dry-run
certbot renew
# to test renew spesific certificate use --cert-name
certbot renew --dry-run --cert-name [SUBDOMAIN].example.com

# configure nginx server block
# to perform SSL

# testing SSL grade
# open https://www.ssllabs.com/ssltest

# if you see any warning or error about ciphers
# generate new ciphers at https://ssl-config.mozilla.org/

# Let's Encrypt's certificates are only valid for 90 days. Certbot will automatically run twice a day and renew any certificate that is within thirty days of expiration. To test the renewal process is working correctly, you can use "dry-run" option:
certbot renew --dry-run
# If you see no errors, you're all set. When necessary, Certbot will renew your certificates and reload Nginx to pick up the changes. If the automated renewal process ever fails, Let’s Encrypt will send a message to the email you specified, warning you when your certificate is about to expire.

##################################
# Install Monit
##################################
sudo apt install -y monit

nano /etc/monit/monitrc

# uncomment httpd like following lines
set httpd port 2812 and
  use address localhost
  allow localhost
  allow admin:monit

systemctl start monit

systemctl enable monit

curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/monit/custom.conf > /etc/monit/conf.d/custom.conf

monit -t

monit reload

monit status

monit summary

##################################
# Install Code Server - VS Code in the browser (Latest)
##################################
$ sudo curl -fsSL https://code-server.dev/install.sh | sh
$ sudo systemctl enable --now code-server@$USER
	#restart for ubuntu-20.04: service code-server@$USER restart
	#restart for ubuntu-18.04: systemctl daemon-reload && service code-server@$USER restart
	#uninstall: rm -rf ~/.local/share/code-server ~/.config/code-server && sudo apt remove code-server
# prepare a subdomain like code.domain.com with no root just proxy to http://localhost:8080; and then enable https with letsencrypt
$ sudo certbot --non-interactive --redirect --agree-tos --nginx -d [SUBDOMAIN].example.com -m [YOUR_EMAIL]
# test nginx & reload nginx
# if error happen, just restart code server
# open subdomain on browser
$ cat ~/.config/code-server/config.yaml
# enter the password
# setting:
	editor > word wrap: ON
	editor > minimap: OFF
	editor > font size: 13
	editor > font family: 'Ubuntu Mono', 'Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback'
	workbench > editor > show tabs: YES
	workbench > editor > enable preview: NO
# icon:
	seti-icons
# theme
	Theme - Seti-Monokai (must install dependency: Monokai++)
# modify favicon
$ cd /usr/lib/code-server/src/browser/media && rm favicon.ico && wget https://raw.githubusercontent.com/achyaryalyal/fastron/master/mylinux/code-server/favicon.ico
# modify login page
$ cd /usr/lib/code-server/src/browser/media && wget https://raw.githubusercontent.com/achyaryalyal/fastron/master/mylinux/code-server/app-icon.png
$ nano /usr/lib/code-server/src/browser/pages/login.html
# add meta tag
    <meta name="robots" content="noindex, nofollow">
# change title to
    <title>VS Code</title>
# change html in <div class="header">....</div>
          <center><img src="{{CS_STATIC_BASE}}/src/browser/media/app-icon.png"></center>
          <!--<h1 class="main">Welcome to code-server</h1>-->
          <!--<div class="sub">Please log in below. {{PASSWORD_MSG}}</div>-->
# exit and save
# install extension manually from terminal: code-server --install-extension ms-vscode.test-adapter-converter-0.1.2.vsix
# you can download [FILE].vsix from https://marketplace.visualstudio.com/

##################################
# Install Composer (Latest)
##################################
$ sudo apt update && sudo apt install php-cli unzip
$ cd ~ && curl -sS https://getcomposer.org/installer -o composer-setup.php
$ HASH=`curl -sS https://composer.github.io/installer.sig` && echo $HASH
# Output
# e0012edf3e80b6978849f5eff0d4b4e4c79ff1609dd1e613307e16318854d24ae64f26d17af3ef0bf7cfb710ca74755a
$ php -r "if (hash_file('SHA384', 'composer-setup.php') === '$HASH') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
# Installer verified
$ sudo php composer-setup.php --install-dir=/usr/bin --filename=composer
# To test your installation, run:
$ composer

##################################
# Create Laravel Project using Composer
##################################
# prepare a domain or subdomain for project and then enable https with letsencrypt
$ cd /var/www
$ composer create-project --prefer-dist laravel/laravel [PROJECT_NAME]
# continue as root/super user [yes]? yes
$ sudo chmod -R 755 /var/www/[PROJECT_NAME]
$ sudo chown -R www-data:www-data /var/www/[PROJECT_NAME]
$ cd [PROJECT_NAME]
$ composer install
# continue as root/super user [yes]? yes
$ php artisan

##################################
# Configure Laravel Project
##################################
$ nano .env
# In case you are installing Laravel in a development environment, you can leave the APP_DEBUG option enabled, as this will give you important debug information while testing the application from a browser. The APP_ENV variable should be set to "development" in this case.
# In case you are installing Laravel in a production environment, you should disable the APP_DEBUG option, because it shows to the final user sensitive information about your application. The APP_ENV in this case should be set to "production"
	APP_NAME: Application name, used for notifications and messages.
	APP_ENV: Current application environment.
	APP_KEY: Used for generating salts and hashes, this unique key is automatically created when installing Laravel via Composer, so you don’t need to change it.
	APP_DEBUG: Whether or not to show debug information at client side.
	APP_URL: Base URL for the application, used for generating application links.
	DB_DATABASE: Database name.
	DB_USERNAME: Username to connect to the database.
	DB_PASSWORD: Password to connect to the database.
# save and exit
# edit nginx server block and point root to public directory of your project
$ nano /etc/nginx/sites-available/[YOUR_SERVER_BLOCK]
	root /var/www/[PROJECT_NAME]/public;
# save and exit
# test nginx & reload nginx
# acccess your project domain or subdomain on the browser

##################################
# Install Rclone
##################################
curl https://rclone.org/install.sh | sudo bash && rclone version
rclone config
# enter "n" for New Remote Storage
# give it a name. ex: Gerobak
# enter "13" for Google Drive
# just leave blank the client_id & client_secret
# enter "1" for Full Access
# paste folder ID from folder URL to root_folder_id. ex: 3Hty4Fkfvb3294xxxxxxxxxxxxxxxxxxf
# just leave blank the service_account_file
# enter "n" for Advanced Config
# enter "n" for Use Auto Config
# go to the following link, copy code, paste to "Enter verification code"
# enter "n" for Team Drive
# enter "y" for Yes This is OK
# enter "q" for Quit Config
# list file: rclone ls Gerobak:
# list dir: rclone lsd Gerobak:
# list file & dir: rclone lsf Gerobak:
# storage info: rclone about Gerobak:
# make dir: rclone mkdir Gerobak:Data
# copy file to destination: rclone copy hello.txt Gerobak:Data
# copy file to local: rclone copy Gerobak:Data/hello.txt /path/to/local/
# copy folder to local: rclone copy Gerobak:Data /path/to/local/
# delete all file, not dir: rclone delete Gerobak:Data
# delete empty dir: rclone rmdir Gerobak:Data
# delete file & dir: rclone purge Gerobak:Data
# sync source to destination: rclone sync hello.txt Gerobak:Data
# move source to destination: rclone move hello.txt Gerobak:Data
# print total size & number of objects: rclone size Gerobak:Data
# mount: rclone mount Gerobak:Data /path/to/local/mount
# stop mounting, check PID: ps ax | grep "rclone mount"
# and than: kill [PID]

##################################
# Install S3FS for mounting S3
##################################
sudo apt-get update
sudo apt-get install fuse automake autotools-dev g++ git libcurl4-openssl-dev libfuse-dev libssl-dev libxml2-dev make pkg-config
git clone https://github.com/s3fs-fuse/s3fs-fuse.git

cd /opt && git clone https://github.com/s3fs-fuse/s3fs-fuse.git && cd s3fs-fuse && ./autogen.sh && ./configure && make && sudo make install

# create "bucket" on your cloud storage account with CrossFTP, more info at https://kb.cloudkilat.com/informasi-umum/cara-akses-kilat-storage-baru-menggunakan-crossftp

# create "directory" on your VM
mkdir /tmp/cache /path/to/mountpoint
chmod 775 /tmp/cache /path/to/mountpoint
chown www-data:www-data /path/to/mountpoint

# create credential file
echo ACCESS_KEY:SECRET_KEY > /etc/.passwd-s3fs
chmod 600 /etc/.passwd-s3fs

# mount cloud storage to cloud VM
s3fs [BUCKET_NAME] /path/to/mountpoint -o passwd_file=/etc/.passwd-s3fs -o allow_other -o nonempty -o ensure_diskfree=30000 -o use_path_request_style -o url=http://s3-id-jkt-1.kilatstorage.id/ -o use_cache=/tmp/cache

# NOTE 1: always use "http" not https because https just give memory leaks of RAM. The publicly facing files are still accessible over https, although we we are not storing anything very sensitive anyway. This does mean that data is being transmitted from one amazon server to another unencrypted, so take this into consideration when deciding. Now s3fs uses only a little of memory, even while actively moving data to our s3 bucket.

# NOTE 2: ensure_diskfree=30000 grants that cache folder (i.e. /tmp/cache) will increase in size but it will be always ensured at least 10GB of disk free.

# check cloud storage has mounted to cloud VM
df -h

# test write/upload a file, then check with DragonDisk
echo HELLO > s3fs.txt

# mount automatically on reboot
nano /etc/fstab

# please read NOTE 1 & 2
# this command is for paste into fstab, if you want to use this command in terminal just try the step about "mount cloud storage to cloud VM" with -o parameter
s3fs#[BUCKET_NAME] /path/to/mountpoint fuse _netdev,passwd_file=/etc/.passwd-s3fs,allow_other,nonempty,ensure_diskfree=30000,use_path_request_style,url=http://s3-id-jkt-1.kilatstorage.id/,use_cache=/tmp/cache 0 0
# mine:
s3fs#bbg-master-cabinet /var/www/master/cabinet fuse _netdev,passwd_file=/etc/.passwd-s3fs,allow_other,nonempty,ensure_diskfree=30000,use_path_request_style,url=http://s3-id-jkt-1.kilatstorage.id/,use_cache=/tmp/cache 0 0
s3fs#bbg-development-cabinet /var/www/development/cabinet fuse _netdev,passwd_file=/etc/.passwd-s3fs,allow_other,nonempty,ensure_diskfree=30000,use_path_request_style,url=http://s3-id-jkt-1.kilatstorage.id/,use_cache=/tmp/cache 0 0

# if you want to test fstab mounting result:
mount -a && df -h

# anyway, if you want to unmount:
umount -i /path/to/mountpoint

##################################
# Install S5CMD (a very fast S3 and local filesystem execution tool) for showing S3 disk space summary
##################################
sudo -i

# build s5cmd from source after have Go 1.13+ installed
snap install go --classic && go version && go get -u github.com/peak/s5cmd && cp /root/go/bin/s5cmd /usr/bin/.

# create credentials
cd /root && mkdir -p .aws && cd .aws && nano credentials
  [default]
  aws_access_key_id = XXXXXXX
  aws_secret_access_key = YYYYYYYY

# make configuration for www-data, so you can run s5cmd with php
cp -a /root/.aws /var/www/ && chown -R www-data:www-data /var/www/.aws

# count objects and determine total size
s5cmd --endpoint-url [S3_ENDPOINT] du --humanize s3://[S3_BUCKET_NAME]/*

# list objects in bucket
s5cmd --endpoint-url [S3_ENDPOINT] ls s3://[S3_BUCKET_NAME]

# more documentation about s5cmd at https://github.com/peak/s5cmd/blob/master/README.md

##################################
# Install Clamav (GAK PERLU)
##################################
sudo apt install clamav clamav-daemon clamav-freshclam && clamdscan -V
sudo /etc/init.d/clamav-freshclam stop
sudo freshclam
sudo /etc/init.d/clamav-freshclam start

# enable notify and schedule the scan
curl -sSL https://raw.githubusercontent.com/achyaryalyal/fastron/master/clamscan_daily.sh > /clamscan_daily.sh
chmod +x /clamscan_daily.sh && chmod 0755 /clamscan_daily.sh

# add script to crontab
	# Let’s create a hard link as below:
	ln /clamscan_daily.sh /etc/cron.daily/clamscan_daily
	# Check to make sure that the hard link was created:
	# ls -li /etc/cron.daily/clamscan_daily

# if you get the following error: LibClamAV Error: cli_loaddb(): No supported database files found in /var/lib/clamav/
# just update the database manually:
freshclam -v

# if you get the following error: Clamd was NOT notified
# just restart the daemon
service clamav-daemon restart

##################################
# Install Atheos 5.0.0 Almoner
##################################
cd /var/www/master/app/lib && rm -rf atheos && wget https://github.com/Atheos/Atheos/archive/refs/heads/master.zip && unzip master.zip && mv Atheos-master atheos && rm -rf master.zip && chown -R www-data:www-data atheos && chmod -R 775 atheos && nano +12 atheos/index.php

# add this to index.php line 12:
	if(!isset($_GET['key']) && !isset($_GET['token'])) {
		http_response_code(403);
		die('Forbidden');
	}

# edit index.php, find replace line 35: <title>Atheos IDE</title>
	<title>Cloud IDE</title>

# add this to index.php before </head>:
	<style>.pdf-icon:before{font-family:'Font Awesome 5 Free';font-weight:900;font-size:16px;content:"\f1c1";}</style>

# edit index.php, find replace line 109: <span id="current_file"></span>
	<span id="current_file" style="user-select:all;"></span>

nano atheos/version.txt
	v5.0.0

nano +7 atheos/components/user/login.php

# edit login.php, find replace line 7: <legend>Atheos <span>IDE</span></legend>
	<legend>Cloud <span>IDE</span></legend>

# edit login.php, find replace line 9: <input id="username" type="text" name="username" autofocus="autofocus" autocomplete="current-username">
	<input id="username" type="password" name="username" autofocus="autofocus" autocomplete="current-username">

# edit login.php, comment out footer link: <a id="github_link" href="https://www.github.com/Atheos/Atheos" target="_blank" rel="noreferrer noopener"><?php echo VERSION ?></a>
<!-- <a id="github_link" href="https://www.github.com/Atheos/Atheos" target="_blank" rel="noreferrer noopener"><?php echo VERSION ?></a> -->

# Go to [IP_OR_DOMAIN]/app/lib/atheos/index.php with key & token params. Setup it and fill `Absolute Path` with folder path you want to manage

# Editor Settings
    ## Theme: Monokai
    ## Font Size: 14px
    ## Highlight Active Line: Enabled
    ## Print Margin: Disabled
    ## Print Margin Column: 80
    ## Indent Guides: Enabled
    ## foldWidgets: Enabled
    ## Line Wrap: Enabled
    ## Soft Tabs: Enabled
    ## Tab Size: 4

# System Settings
    ## Active File Loop Behavior: Loop only active tabs
    ## Sidebar Hover Duration: 300ms (default)
    ## Show Hidden Files: False
    ## Filemanager Trigger: Single Click
    ## Left Sidebar Trigger: Hover
    ## Right Sidebar Trigger: Hover
    ## ProjectDock Trigger: Single Click

# users data: atheos/data/users.db.json
{
    "johndoe": {
        "password": "$2y$11$xxxxxxxxxxxxxxxx", // php password_hash() function
        "activeProject": "",
        "creationDate": "2021-01-01 00:00:00",
        "lastLogin": "2021-01-01 00:00:00",
        "permissions": [
            "configure",
            "read",
            "write"
        ],
        "userACL": "full",
        "activeName": "MY PROJECT",
        "activePath": "\/var\/www"
    }
}

# projects data: atheos/data/projects.db.json
{
    "MY PROJECT": "\/var\/www"
}

##################################
# TIPS AND TRICK
##################################

######### NANO jump to EOF #########
nano +99999 file

######### clear bash history #########
history -c && > ~/.bash_history

######### check disk usage (sorted human readable) #########
du -x --max-depth=1 [PATH] | sort -n | awk '{ print $2 }' | xargs du -hx --max-depth=0

######### recursively search string #########
cd [DIRECTORY]
grep -nr "YOUR_STRING"
######### recursively search string and sort it #########
cd [DIRECTORY]
grep -nr "YOUR_STRING" | sort -u
######### recursively search string and replace #########
cd [DIRECTORY]
grep -rl "NEW_STRING" | xargs sed -i "s/NEW_STRING/OLD_STRING/g"

######### curl #########
curl -I https://www.example.com
######### curl with user agent #########
curl -I https://www.example.com -A "360Spider" --> must 403
curl -I https://www.example.com -A "Googlebot" --> must 200

######### safe with chown & chmod #########
sudo chown www-data:www-data -R /var/www
cd /var/www
sudo find . -type f -exec chmod 664 {} \;
sudo find . -type d -exec chmod 775 {} \;

######### Unbap IP with Fail2Ban #########
fail2ban-client set [YOUR_JAIL_NAME] unbanip [IP_ADDR]

######### Whitelisting IP in Fail2Ban #########
nano +54 /etc/fail2ban/jail.local
ignoreip = 127.0.0.1/8 ::1 .... .... ....
service fail2ban restart

######### Cron Job #########
# Example of job definition:
# .---------------- minute (0 - 59)
# |  .------------- hour (0 - 23)
# |  |  .---------- day of month (1 - 31)
# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
# |  |  |  |  |
# *  *  *  *  * user-name  command to be executed
  0  0  *  *  * root /sbin/hwclock -w   # synchronize hardware & system clock every day at 00:00 am
  1  0  *  *  0 root /sbin/shutdown -r now "weekly reboot"   # reboot every sunday at 00:01 am

# update GeoIP databases every sunday at 02:00 AM
00  2  *  *  0 /usr/bin/geoipupdate -v

# remove s3fs cache every sunday at 02:30 AM
30  2  *  *  0 find /tmp/cache/* -exec rm -f {} \;

# re-ownership php session directory every day at 03:00 AM
00  3  *  *  * chown -R www-data:www-data /var/lib/php/sessions
 
# optimize all mysql databases every sunday at 03:30 AM
30  3  *  *  0 mysqlcheck --all-databases --optimize --skip-write-binlog

# reboot server every day at 04:00 AM
00  4  *  *  * /sbin/shutdown -r now

######### Export Database #########
date=$(date +%Y-%m-%d_%H-%M) && mysqldump -h localhost -u root -p [DB_NAME] > /path/to/destination/[DB_NAME]_DB_${date}.sql
######### Import Database (make sure the database is EMPTY) #########
mysql -u root -p [DB_NAME] < file.sql

######### Force HTTPS Wordpress #########
edit wp-config.php file
UPDATE wp_blogs SET domain = REPLACE(domain, "http://www.example.com", "https://www.example.com");
UPDATE wp_options SET option_value = REPLACE(option_value, "http://www.example.com", "https://www.example.com");
UPDATE wp_site SET domain = REPLACE(domain, "http://www.example.com", "https://www.example.com");
UPDATE wp_sitemeta SET meta_value = REPLACE(meta_value, "http://www.example.com", "https://www.example.com);
######### Force HTTP Wordpress #########
edit wp-config.php file
UPDATE wp_blogs SET domain = REPLACE(domain, "https://www.example.com", "http://www.example.com");
UPDATE wp_options SET option_value = REPLACE(option_value, "https://www.example.com", "http://www.example.com");
UPDATE wp_site SET domain = REPLACE(domain, "https://www.example.com", "http://www.example.com");
UPDATE wp_sitemeta SET meta_value = REPLACE(meta_value, "https://www.example.com", "http://www.example.com");

######### Download a directory from another server with SCP #########
scp -P [PORT_SSH] -r user@IP_SERVER:/path/from/remote/source /path/to/local/destination
######### Upload a directory to another server with SCP #########
scp -P [PORT_SSH] -r /path/local/source user@IP_SERVER:/path/to/remote/destination 

######### Flooding with SIEGE #########
sudo apt install siege
siege -c 200 -b -t30s 'https://example.com'
######### Flooding with CURL #########
curl -s 'https://example.com/wp-login.php?[1-100]'
######### Flooding with DOSER ######### https://github.com/Quitten/doser.py
# command 999 threads sends GET requests:
python doser.py -t 999 -g 'https://example.com'
# command 999 threads sends POST requests with json data:
python doser.py -t 999 -p 'https://example.com' -ah 'Content-Type: application/json' -d '{"json": "payload"}'
######### Flooding with SLOWHTTPTEST #########
sudo apt install slowhttptest
slowhttptest -c 1000 -H -g -o slowhttp -i 10 -r 200 -t GET -u http://domain.com/index.php -x 24 -p 2
#don't trust always the service available message, just try accessing the real website from a browser and you will see if it works or not

######### Display a summary of all services currently running #########
systemctl -t service --state=active --no-pager --no-legend | egrep '^*\.service.*running' | awk 'BEGIN { FS = " ";} {for (i = 2; i <= 4; i++) { $i = "" }; print}'
systemctl status --no-pager --full
systemctl list-unit-files --state=enabled --no-pager
systemctl --type=service --state=active list-units --no-pager
systemctl --type=service --state=running list-units --no-pager

######### List user on linux system #########
awk -F: '{ print $1}' /etc/passwd

:)
